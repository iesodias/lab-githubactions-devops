name: Deploy Terraform to Azure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destruir infraestrutura?'
        required: true
        default: 'false'

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 🔎 Validar Terraform
    runs-on: ubuntu-latest
    outputs:
      step-outcome: ${{ steps.validate-terraform.outputs.failed }}
      error-type: ${{ steps.validate-terraform.outputs.error }}
    # Não usar continue-on-error no job; vamos controlar no step e falhar no final
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Validar Sintaxe e Plano
        id: validate-terraform
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          FAILED=false
          set -o pipefail

          # terraform init
          if ! terraform init -no-color 2>&1 | tee tf_init.log; then
            echo "error=terraform_backend_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_init.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          # terraform fmt
          if [ "$FAILED" = false ] && ! terraform fmt -check -no-color 2>&1 | tee tf_fmt.log; then
            echo "error=terraform_format_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_fmt.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          # terraform validate
          if [ "$FAILED" = false ] && ! terraform validate -no-color 2>&1 | tee tf_validate.log; then
            echo "error=terraform_validation_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_validate.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          # terraform plan
          if [ "$FAILED" = false ] && ! terraform plan -no-color -out=tfplan 2>&1 | tee tf_plan.log; then
            echo "error=terraform_plan_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_plan.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          if [ "$FAILED" = false ]; then
            echo "error=none" >> $GITHUB_OUTPUT
            echo "failed=false" >> $GITHUB_OUTPUT
          else
            echo "failed=true" >> $GITHUB_OUTPUT
          fi

      # ChatGPT troubleshooting no MESMO job para capturar erro específico
      - name: Set up Python (ChatGPT)
        if: ${{ steps.validate-terraform.outputs.failed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (ChatGPT)
        if: ${{ steps.validate-terraform.outputs.failed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install openai requests

      - name: ChatGPT Troubleshooting
        if: ${{ steps.validate-terraform.outputs.failed == 'true' }}
        id: troubleshoot
        timeout-minutes: 5
        env:
          ERROR_TYPE: ${{ steps.validate-terraform.outputs.error }}
          ERROR_MESSAGE: ${{ steps.validate-terraform.outputs.error_message }}
          WORKFLOW_NAME: ${{ github.workflow }}
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 scripts/chatgpt_troubleshoot.py

      - name: Upload Troubleshooting Report
        if: ${{ always() && steps.validate-terraform.outputs.failed == 'true' && hashFiles('troubleshooting_report.md') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: troubleshooting-report-${{ github.run_number }}
          path: troubleshooting_report.md
          retention-days: 30

      - name: Falhar job após troubleshooting (se necessário)
        if: ${{ steps.validate-terraform.outputs.failed == 'true' }}
        run: exit 1

  deploy:
    if: ${{ github.event.inputs.destroy == 'false' && needs.validate.result == 'success' }}
    name: 🚀 Deploy e Configuração
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
      nsgName: ${{ steps.output_vm.outputs.nsg_name }}
      resourceGroup: ${{ steps.output_vm.outputs.resource_group }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Aplicar Terraform
        id: apply-terraform
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          FAILED=false
          set -o pipefail

          if ! terraform init -no-color 2>&1 | tee tf_apply_init.log; then
            echo "error=apply_backend_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_apply_init.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          if [ "$FAILED" = false ] && ! terraform apply -no-color -auto-approve 2>&1 | tee tf_apply.log; then
            echo "error=terraform_apply_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 tf_apply.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi

          if [ "$FAILED" = false ]; then
            echo "error=none" >> $GITHUB_OUTPUT
            echo "failed=false" >> $GITHUB_OUTPUT
          else
            echo "failed=true" >> $GITHUB_OUTPUT
          fi

      # ChatGPT troubleshooting para falha no apply
      - name: Set up Python (ChatGPT - apply)
        if: ${{ steps.apply-terraform.outputs.failed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (ChatGPT - apply)
        if: ${{ steps.apply-terraform.outputs.failed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install openai requests

      - name: ChatGPT Troubleshooting (apply)
        if: ${{ steps.apply-terraform.outputs.failed == 'true' }}
        id: troubleshoot-apply
        timeout-minutes: 5
        env:
          ERROR_TYPE: ${{ steps.apply-terraform.outputs.error }}
          ERROR_MESSAGE: ${{ steps.apply-terraform.outputs.error_message }}
          WORKFLOW_NAME: ${{ github.workflow }}
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 scripts/chatgpt_troubleshoot.py

      - name: Upload Troubleshooting Report (apply)
        if: ${{ always() && steps.apply-terraform.outputs.failed == 'true' && hashFiles('troubleshooting_report.md') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: troubleshooting-report-apply-${{ github.run_number }}
          path: troubleshooting_report.md
          retention-days: 30

      - name: Falhar job após troubleshooting (apply)
        if: ${{ steps.apply-terraform.outputs.failed == 'true' }}
        run: exit 1

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        if: ${{ steps.apply-terraform.outputs.failed != 'true' }}
        run: |
          echo "vm_name=vm-automation" >> $GITHUB_OUTPUT
          echo "admin_username=azureuser" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
          echo "nsg_name=$(terraform output -raw nsg_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Definir Variáveis de Ambiente
        if: ${{ steps.apply-terraform.outputs.failed != 'true' }}
        run: |
          echo "VM_NAME=vm-automation" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=azureuser" >> $GITHUB_ENV
          echo "PUBLIC_IP=${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh azureuser@${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Instalar Ansible e sshpass
        if: ${{ steps.apply-terraform.outputs.failed != 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: Criar Inventário Ansible
        if: ${{ steps.apply-terraform.outputs.failed != 'true' }}
        run: |
          echo "[vm]" > inventory
          echo "$PUBLIC_IP ansible_user=$ADMIN_USERNAME ansible_password=${{ secrets.ADMIN_PASSWORD }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      - name: Executar Playbook Ansible
        id: ansible-playbook
        if: ${{ steps.apply-terraform.outputs.failed != 'true' }}
        run: |
          FAILED=false
          set -o pipefail
          if ! ansible-playbook -i inventory ansible/playbook.yml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}" 2>&1 | tee ansible.log; then
            echo "error=ansible_playbook_error" >> $GITHUB_OUTPUT
            {
              echo 'error_message<<EOF'
              tail -n 200 ansible.log || true
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            FAILED=true
          fi
          if [ "$FAILED" = false ]; then
            echo "error=none" >> $GITHUB_OUTPUT
            echo "failed=false" >> $GITHUB_OUTPUT
          else
            echo "failed=true" >> $GITHUB_OUTPUT
          fi

      # ChatGPT troubleshooting para falha no Ansible
      - name: Set up Python (ChatGPT - ansible)
        if: ${{ steps.ansible-playbook.outputs.failed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (ChatGPT - ansible)
        if: ${{ steps.ansible-playbook.outputs.failed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install openai requests

      - name: ChatGPT Troubleshooting (ansible)
        if: ${{ steps.ansible-playbook.outputs.failed == 'true' }}
        id: troubleshoot-ansible
        timeout-minutes: 5
        env:
          ERROR_TYPE: ${{ steps.ansible-playbook.outputs.error }}
          ERROR_MESSAGE: ${{ steps.ansible-playbook.outputs.error_message }}
          WORKFLOW_NAME: ${{ github.workflow }}
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 scripts/chatgpt_troubleshoot.py

      - name: Upload Troubleshooting Report (ansible)
        if: ${{ always() && steps.ansible-playbook.outputs.failed == 'true' && hashFiles('troubleshooting_report.md') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: troubleshooting-report-ansible-${{ github.run_number }}
          path: troubleshooting_report.md
          retention-days: 30

      - name: Falhar job após troubleshooting (ansible)
        if: ${{ steps.ansible-playbook.outputs.failed == 'true' }}
        run: exit 1

  post-tests:
    if: ${{ github.event.inputs.destroy == 'false' && needs.deploy.result == 'success' }}
    name: ✅ Pós-Testes de Infra
    needs: deploy
    runs-on: ubuntu-latest
    env:
      PUBLIC_IP: ${{ needs.deploy.outputs.publicIP }}
      VM_NAME: ${{ needs.deploy.outputs.vmName }}
      NSG_NAME: ${{ needs.deploy.outputs.nsgName }}
      RESOURCE_GROUP: ${{ needs.deploy.outputs.resourceGroup }}
    steps:
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Testar Swagger na Porta 8081
        run: |
          echo "Aguardando aplicação subir com Swagger..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP:8081/swagger-ui/index.html)
          if [ "$response" != "200" ]; then
            echo "❌ Swagger não respondeu como esperado. Status HTTP: $response"
            exit 1
          else
            echo "✅ Swagger disponível em /swagger-ui/index.html na porta 8081!"
          fi

      - name: Verificar status da VM
        run: |
          status=$(az vm get-instance-view \
            --name "$VM_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "instanceView.statuses[?code=='PowerState/running'].displayStatus" \
            --output tsv)

          echo "Status da VM: $status"

          if [ "$status" != "VM running" ]; then
              echo "❌ A VM não está em execução!"
              exit 1
          else
              echo "✅ VM está rodando com sucesso!"
          fi

      - name: Verificar regra da NSG para porta 8081
        run: |
          result=$(az network nsg rule list \
            --nsg-name "$NSG_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?destinationPortRange=='8081' && access=='Allow']")

          if [ "$result" = "[]" ]; then
            echo "❌ Porta 8081 não está liberada na NSG!"
            exit 1
          else
            echo "✅ Porta 8081 está liberada corretamente na NSG!"
          fi

  destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    name: 🧨 Destruir Infraestrutura
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Executar Terraform Destroy
        working-directory: infra
        run: |
          terraform init
          terraform destroy -auto-approve