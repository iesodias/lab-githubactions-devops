name: Deploy Terraform to Azure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destruir infraestrutura?'
        required: true
        default: 'false'

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 🔎 Validar Terraform
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      step-outcome: ${{ steps.terraform-validate.outcome }}
      error-type: ${{ steps.terraform-validate.outputs.error }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Validar Sintaxe e Plano
        id: terraform-validate
        continue-on-error: true
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          
          # Terraform init
          if ! terraform init; then
            echo "error=terraform_init_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Terraform format check
          if ! terraform fmt -check; then
            echo "error=terraform_format_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Terraform validate
          if ! terraform validate; then
            echo "error=terraform_validation_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Terraform plan
          if ! terraform plan -out=tfplan; then
            echo "error=terraform_plan_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "error=none" >> $GITHUB_OUTPUT

  deploy:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 🚀 Deploy e Configuração
    needs: validate
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
      nsgName: ${{ steps.output_vm.outputs.nsg_name }}
      resourceGroup: ${{ steps.output_vm.outputs.resource_group }}
      step-outcome: ${{ steps.terraform-apply.outcome }}
      error-type: ${{ steps.terraform-apply.outputs.error }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Aplicar Terraform
        id: terraform-apply
        continue-on-error: true
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          
          # Terraform init
          if ! terraform init; then
            echo "error=terraform_init_deploy_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Terraform apply
          if ! terraform apply -auto-approve; then
            echo "error=terraform_apply_error" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "error=none" >> $GITHUB_OUTPUT

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        run: |
          echo "vm_name=vm-automation" >> $GITHUB_OUTPUT
          echo "admin_username=azureuser" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
          echo "nsg_name=$(terraform output -raw nsg_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Definir Variáveis de Ambiente
        run: |
          echo "VM_NAME=vm-automation" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=azureuser" >> $GITHUB_ENV
          echo "PUBLIC_IP=${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh azureuser@${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Instalar Ansible e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: Criar Inventário Ansible
        run: |
          echo "[vm]" > inventory
          echo "${{ env.PUBLIC_IP }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_password=${{ secrets.ADMIN_PASSWORD }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      - name: Executar Playbook Ansible
        run: |
          ansible-playbook -i inventory ansible/playbook.yml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}"

  post-tests:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: ✅ Pós-Testes de Infra
    needs: deploy
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      step-outcome: ${{ steps.run-tests.outcome }}
      error-type: ${{ steps.run-tests.outputs.error }}
    env:
      PUBLIC_IP: ${{ needs.deploy.outputs.publicIP }}
      VM_NAME: ${{ needs.deploy.outputs.vmName }}
      NSG_NAME: ${{ needs.deploy.outputs.nsgName }}
      RESOURCE_GROUP: ${{ needs.deploy.outputs.resourceGroup }}
    steps:
      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Executar Testes de Infraestrutura
        id: run-tests
        continue-on-error: true
        run: |
          # Teste 1: Swagger na Porta 8081
          echo "Aguardando aplicação subir com Swagger..."
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP:8081/swagger-ui/index.html)
          if [ "$response" != "200" ]; then
            echo "❌ Swagger não respondeu como esperado. Status HTTP: $response"
            echo "error=swagger_test_error" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Swagger disponível em /swagger-ui/index.html na porta 8081!"
          fi

          # Teste 2: Status da VM
          status=$(az vm get-instance-view \
            --name "$VM_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "instanceView.statuses[?code=='PowerState/running'].displayStatus" \
            --output tsv)

          echo "Status da VM: $status"
          if [ "$status" != "VM running" ]; then
              echo "❌ A VM não está em execução!"
              echo "error=vm_status_error" >> $GITHUB_OUTPUT
              exit 1
          else
              echo "✅ VM está rodando com sucesso!"
          fi

          # Teste 3: Regra da NSG para porta 8081
          result=$(az network nsg rule list \
            --nsg-name "$NSG_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?destinationPortRange=='8081' && access=='Allow']")

          if [ "$result" = "[]" ]; then
            echo "❌ Porta 8081 não está liberada na NSG!"
            echo "error=nsg_rule_error" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Porta 8081 está liberada corretamente na NSG!"
          fi
          
          echo "error=none" >> $GITHUB_OUTPUT

  troubleshooting:
    runs-on: ubuntu-latest
    needs: [validate, deploy, post-tests]
    if: always() && (failure() || cancelled())
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai requests
        
    - name: ChatGPT Troubleshooting
      id: troubleshoot
      timeout-minutes: 5
      env:
        ERROR_TYPE: ${{ (needs.validate.outputs.error-type != 'none' && needs.validate.outputs.error-type) || (needs.deploy.outputs.error-type != 'none' && needs.deploy.outputs.error-type) || (needs.post-tests.outputs.error-type != 'none' && needs.post-tests.outputs.error-type) || 'unknown_error' }}
        WORKFLOW_NAME: ${{ github.workflow }}
        REPOSITORY: ${{ github.repository }}
        BRANCH: ${{ github.ref_name }}
        COMMIT: ${{ github.sha }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python3 scripts/chatgpt_troubleshoot.py
        
    - name: Upload Troubleshooting Report
      if: always() && hashFiles('troubleshooting_report.md') != ''
      uses: actions/upload-artifact@v4
      with:
        name: troubleshooting-report-${{ github.run_number }}
        path: troubleshooting_report.md
        retention-days: 30
        

  destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    name: 🧨 Destruir Infraestrutura
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Executar Terraform Destroy
        working-directory: infra
        run: |
          terraform init
          terraform destroy -auto-approve